class Solution {
public:
    vector<string> result;
    unordered_map<char,vector<char>> umap;
    void makemap(){
        char start='a';
        for(char c='2';c<'8';c++){
            for(int i=0;i<3;i++){
                umap[c].push_back(start);
                start++;
            }
        }
        umap['7'].push_back(start);
        start++;
        for(char c='8';c<='9';c++){
            for(int i=0;i<3;i++){
                umap[c].push_back(start);
                start++;
            }
        }
        umap['9'].push_back(start);
    }
    void allpossiblecombi(string digits,string tra,int pos){
        if(pos==digits.length()){
            result.push_back(tra);
            return;
        }
        vector<char> letters=umap[digits[pos]];
        for(int i=0;i<letters.size();i++){
            tra.push_back(letters[i]);
            allpossiblecombi(digits,tra,pos+1);
            tra.pop_back();
        }
        return;
    }
    vector<string> letterCombinations(string digits) 
    {
     if(digits.size()==0)
      return result;   
     string tra;  
     makemap();   
     allpossiblecombi(digits,tra,0);
     return result;   
    }
};
